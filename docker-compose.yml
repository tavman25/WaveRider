version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_AGENT_URL=http://agents:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
      - agents
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    networks:
      - waverider-network

  # Backend - FastAPI Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://waverider:waverider123@postgres:5432/waverider
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - DEBUG=false
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - waverider-uploads:/app/uploads
    networks:
      - waverider-network

  # Agents - AI Agent Server
  agents:
    build:
      context: .
      dockerfile: Dockerfile.agents
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - VECTOR_DB_URL=http://vector-db:8080
      - DEBUG=false
    depends_on:
      - redis
      - vector-db
    volumes:
      - ./agents:/app
      - waverider-models:/app/models
    networks:
      - waverider-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=waverider
      - POSTGRES_USER=waverider
      - POSTGRES_PASSWORD=waverider123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - waverider-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - waverider-network

  # Vector Database (FAISS + HTTP API)
  vector-db:
    build:
      context: .
      dockerfile: Dockerfile.vectordb
    ports:
      - "8080:8080"
    volumes:
      - vector-data:/app/data
    environment:
      - VECTOR_DIM=1536
      - INDEX_TYPE=IVF
    networks:
      - waverider-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - agents
    networks:
      - waverider-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - waverider-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=waverider123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - waverider-network

  # Development Tools - Code Quality
  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=waverider
      - SONAR_JDBC_PASSWORD=waverider123
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-logs:/opt/sonarqube/logs
      - sonarqube-extensions:/opt/sonarqube/extensions
    depends_on:
      - postgres
    networks:
      - waverider-network

volumes:
  postgres-data:
  redis-data:
  vector-data:
  waverider-uploads:
  waverider-models:
  prometheus-data:
  grafana-data:
  sonarqube-data:
  sonarqube-logs:
  sonarqube-extensions:

networks:
  waverider-network:
    driver: bridge
